<idea-plugin url="https://gitee.com/baomidou/mybatis-plus" require-restart="false" allow-bundled-update="true">
    <id>com.bruce.mybatisxcodegenerator</id>
    <name>MyBatisX-CodeGeneratorOnly</name>
    <vendor email="gejun123456@gmail.com" url="">MyBatisX-CodeGeneratorOnly</vendor>

    <description><![CDATA[
          MybatisX CodeGeneratorOnly plugin
          Features:
       <ul>
         <li>Code generator when right click on database table</li>
           <li>For people who are migrating from MybatisX to other plugin but want to use with the code generator</li>
      </ul>
          <ul>
              <li>代码生成器可以在表上右键生成代码</li>
              <li>由于idea api限制，只能支持一个带图标的Mybatis插件，方便用户从MybatisX插件迁移到其他插件当用户需要使用MybatisX这个代码生成器的时候</li>
          </ul>
      QQ群号: 789681969
        <b>Code is forked from https://gitee.com/baomidou/MybatisX only keep the code generator code</b>
      ]]>
    </description>

    <change-notes><![CDATA[
      <h4>1.4.8</h4>
      <ul>
          <li>change style of generate code by templates</li>
          <li>fixed some bugs</li>
      </ul>
       <h4>1.3.6</h4>
      <ul>
          <li>fixed some bugs</li>
          <li>fixed advance tip for jpa</li>
          <li>fixed xml generate for multi module</li>
          <li>fixed alias scan for springboot</li>
      </ul>
      ]]>
    </change-notes>

    <idea-version since-build="202.0"/>
    <depends>com.intellij.modules.java</depends>
    <depends optional="true" config-file="database.xml">com.intellij.database</depends>
    <!-- support aliases -->
    <depends optional="true" config-file="spring.xml">com.intellij.spring</depends>
    <!-- support aliases -->
    <depends optional="true" config-file="spring-boot.xml">com.intellij.spring.boot</depends>
    <depends optional="true" config-file="withKotlin.xml">org.jetbrains.kotlin</depends>
    <depends optional="true" config-file="injection-mybatisx.xml">org.intellij.intelliLang</depends>

    <extensions defaultExtensionNs="com.intellij">
        <projectService id="baomidou.TemplatesSettings"
                        serviceImplementation="com.baomidou.plugin.idea.mybatisx.generate.setting.TemplatesSettings"/>
        <!--文件描述-->
<!--        &lt;!&ndash; mapper.xml文件属性提示 &ndash;&gt;-->
<!--        <dom.fileMetaData id="baomidou.MapperDescription"-->
<!--                          rootTagName="mapper"-->
<!--                             implementation="com.baomidou.plugin.idea.mybatisx.dom.description.MapperDescription"/>-->
<!--        &lt;!&ndash; mybatis配置文件属性提示 &ndash;&gt;-->
<!--        <dom.fileMetaData id="baomidou.ConfigurationDescription"-->
<!--                             rootTagName="configuration"-->
<!--            implementation="com.baomidou.plugin.idea.mybatisx.dom.description.ConfigurationDescription"/>-->

        <!-- Ctrl+B, 定位类的跳转, 定位方法的跳转 -->
<!--        <definitionsScopedSearch id="baomidou.MapperClassSearch"-->
<!--                implementation="com.baomidou.plugin.idea.mybatisx.system.definitionsearch.MapperClassSearch"/>-->
<!--        &lt;!&ndash; 与搜索配套的跳转 &ndash;&gt;-->
<!--        <gotoTargetRendererProvider order="first" implementation="com.baomidou.plugin.idea.mybatisx.provider.GotoMapperXmlSchemaTypeRendererProvider"/>-->

        <!--项目服务-->
<!--        <projectService id="baomidou.JavaService" serviceImplementation="com.baomidou.plugin.idea.mybatisx.service.JavaService"/>-->
<!--        <projectService id="baomidou.AnnotationService" serviceImplementation="com.baomidou.plugin.idea.mybatisx.service.AnnotationService"/>-->
<!--        <projectService id="baomidou.EditorService" serviceImplementation="com.baomidou.plugin.idea.mybatisx.service.EditorService"/>-->
<!--        <projectService id="baomidou.AliasFacade" serviceImplementation="com.baomidou.plugin.idea.mybatisx.alias.AliasFacade"/>-->


<!--        <projectService id="baomidou.MapperLocator" serviceImplementation="com.baomidou.plugin.idea.mybatisx.locator.MapperLocator"/>-->


        <!--代码行插件，实现代码导航功能-->
        <!-- java 跳转到 xml  -->
<!--        <codeInsight.lineMarkerProvider id="baomidou.MapperLineMarkerProvider" language="JAVA"-->
<!--                                        implementationClass="com.baomidou.plugin.idea.mybatisx.provider.MapperLineMarkerProvider"/>-->
<!--        &lt;!&ndash; xml 跳转到 java &ndash;&gt;-->
<!--        <codeInsight.lineMarkerProvider id="baomidou.StatementLineMarkerProvider" language="XML"-->
<!--                                        implementationClass="com.baomidou.plugin.idea.mybatisx.provider.StatementLineMarkerProvider"/>-->
<!--        &lt;!&ndash; 在service层注入了mapper对象, 在这个对象进行跳转到 mapper 类&ndash;&gt;-->
<!--        <codeInsight.lineMarkerProvider id="baomidou.InjectionLineMarkerProvider" language="JAVA"-->
<!--                                        implementationClass="com.baomidou.plugin.idea.mybatisx.provider.InjectionLineMarkerProvider"/>-->

<!--         设置中的配置 -->
        <applicationConfigurable id="mybatisx.settings" displayName="MybatisX"
                                 instance="com.baomidou.plugin.idea.mybatisx.setting.MybatisConfigurable"/>



        <!-- xml 标签提示 -->
        <!-- 在mapper.xml内部, 进行智能提示, 例如: #{提示位置} -->
<!--        <completion.contributor id="baomidou.SqlParamCompletionContributor" language="SQL"-->
<!--                                implementationClass="com.baomidou.plugin.idea.mybatisx.system.contributor.SqlParamCompletionContributor"-->
<!--                                order="first"/>-->
<!--        &lt;!&ndash; jpa规范提示, 在mapper类声明方法提示, 提示字符串完成后, 后续可以根据字符串生成方法参数和XML内容 &ndash;&gt;-->
<!--        <completion.contributor id="baomidou.MapperMethodCompletionContributor" language="JAVA"-->
<!--                                implementationClass="com.baomidou.plugin.idea.mybatisx.system.contributor.MapperMethodCompletionContributor"/>-->


        <!--文件模板组，新建文件选择模板, 这里只是定义一个模板, 在mapper类方法定义完成后, 可以根据这个空模板生成一个文件 -->
        <fileTemplateGroup id="baomidou.MybatisFileTemplateDescriptorFactory"
            implementation="com.baomidou.plugin.idea.mybatisx.system.template.MybatisFileTemplateDescriptorFactory"/>

        <!--附加的LiveTemplate模板-->
<!--        <defaultLiveTemplates id="baomidou.SqlLiveTemplateProvider"-->
<!--                              file="liveTemplates/sql"/>-->

        <!-- Mapper类 重命名 -->
<!--        <refactoring.elementListenerProvider id="baomidou.MapperRefactoringProvider"-->
<!--            implementation="com.baomidou.plugin.idea.mybatisx.system.refactoring.MapperRefactoringProvider"/>-->

        <!-- 语法校验，让没有生成代码的方法产生错误 -->
<!--        <localInspection language="JAVA" shortName="MybatisXMapperMethodInspection"-->
<!--                         id="baomidou.MybatisMapperMethodInspection"-->
<!--                         displayName="Mapper method inspection"-->
<!--                         groupName="Mybatis" enabledByDefault="true" level="ERROR"-->
<!--                         implementationClass="com.baomidou.plugin.idea.mybatisx.inspection.MapperMethodInspection"/>-->
<!--        <localInspection language="XML" shortName="MybatisXMapperXmlInspection"-->
<!--                         enabledByDefault="true"-->
<!--                         level="ERROR"-->
<!--                         id="baomidou.MybatisMapperXmlInspection"-->
<!--                         displayName="Mapper xml inspection"-->
<!--                         groupName="Mybatis"-->
<!--                         hasStaticDescription="true"-->
<!--                         implementationClass="com.baomidou.plugin.idea.mybatisx.inspection.MapperXmlInspection"/>-->

        <!--提示动作 start-->
        <!-- 生成参数注解 @Param -->
<!--        <intentionAction id="baomidou.GenerateParamAnnotationIntention">-->
<!--            <className>com.baomidou.plugin.idea.mybatisx.intention.GenerateParamAnnotationIntention</className>-->
<!--        </intentionAction>-->
<!--        &lt;!&ndash; 通过方法名生成对应的 查询语句 &ndash;&gt;-->
<!--        <intentionAction id="baomidou.GenerateStatementIntention">-->
<!--            <className>com.baomidou.plugin.idea.mybatisx.intention.GenerateStatementIntention</className>-->
<!--        </intentionAction>-->
<!--        &lt;!&ndash; 生成mybatis mapper.xml文件 &ndash;&gt;-->
<!--        <intentionAction order="first" id="baomidou.GenerateMapperIntention">-->
<!--            <className>com.baomidou.plugin.idea.mybatisx.intention.GenerateMapperIntention</className>-->
<!--        </intentionAction>-->

        <!-- 根据jpa名字生成方法和xml文件内容 -->
<!--        <intentionAction id="baomidou.GenerateMapperMethodSmartJpaAction">-->
<!--            <className>com.baomidou.plugin.idea.mybatisx.smartjpa.GenerateSmartJpaAction</className>-->
<!--        </intentionAction>-->

<!--        <intentionAction id="baomidou.GenerateMapperMethodSmartAdvanceJpaAction">-->
<!--            <className>com.baomidou.plugin.idea.mybatisx.smartjpa.GenerateSmartJpaAdvanceAction</className>-->
<!--        </intentionAction>-->
        <!--提示动作 end-->

        <!-- mybatis的xml和mapper类 文件图标都改成一只鸟-->
<!--        <iconProvider id="baomidou.XmlAndMapperIconProvider"-->
<!--                      implementation="com.baomidou.plugin.idea.mybatisx.provider.XmlAndMapperIconProvider"/>-->


        <!-- mapper.xml文件 #{} 区域的引用跳转 -->
<!--        <psi.referenceContributor id="hashMarkerReferenceContributor"-->
<!--                                  implementation="com.baomidou.plugin.idea.mybatisx.reference.ContextHashMarkReferenceContributor"/>-->

        <!-- 应用服务, 必须放在主文件,否则 XmlAndMapperIconProvider 会加载不到-->
        <applicationService id="com.bruce.MybatisSetting"
                            serviceImplementation="com.baomidou.plugin.idea.mybatisx.setting.MybatisXSettings"/>
        <!-- 使用 Alt+Delete 删除方法时, 也删掉对应的标签 -->
<!--        <refactoring.safeDeleteProcessor id="MapperMethodSafeDeleteProcessor"-->
<!--            implementation="com.baomidou.plugin.idea.mybatisx.system.refactoring.MapperMethodSafeDeleteProcessor"/>-->
    </extensions>

</idea-plugin>
